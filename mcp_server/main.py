# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T10:35:23+00:00



import argparse
import json
import os
from datetime import datetime
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBasic
from fastapi import Query
from starlette.requests import Request

from models import (
    Attribute,
    AttributesComputedGetResponse,
    Calendar,
    CalendarsGetResponse,
    Command,
    CommandsGetResponse,
    CommandsSendGetResponse,
    CommandsTypesGetResponse,
    Device,
    DeviceAccumulators,
    DeviceId,
    DevicesGetResponse,
    Driver,
    DriversGetResponse,
    Event,
    Geofence,
    GeofencesGetResponse,
    Group,
    GroupId,
    GroupsGetResponse,
    Maintenance,
    MaintenanceGetResponse,
    Notification,
    NotificationsGetResponse,
    NotificationsTypesGetResponse,
    Permission,
    PositionsGetResponse,
    ReportsEventsGetResponse,
    ReportsRouteGetResponse,
    ReportsStopsGetResponse,
    ReportsSummaryGetResponse,
    ReportsTripsGetResponse,
    Server,
    StatisticsGetResponse,
    Type,
    User,
    UsersGetResponse,
)

app = MCPProxy(
    contact={
        'email': 'support@traccar.org',
        'name': 'Traccar Support',
        'url': 'https://www.traccar.org/',
    },
    description='Open Source GPS Tracking Platform',
    license={
        'name': 'Apache 2.0',
        'url': 'https://www.apache.org/licenses/LICENSE-2.0.html',
    },
    title='Traccar',
    version='5.6',
    servers=[
        {'description': 'Demo Server 1', 'url': 'https://demo.traccar.org/api'},
        {'description': 'Demo Server 2', 'url': 'https://demo2.traccar.org/api'},
        {'description': 'Demo Server 3', 'url': 'https://demo3.traccar.org/api'},
        {'description': 'Demo Server 4', 'url': 'https://demo4.traccar.org/api'},
        {'description': 'Subscription Server', 'url': 'https://server.traccar.org/api'},
        {
            'description': 'Other Server',
            'url': 'http://{host}:{port}/api',
            'variables': {
                'host': {'default': 'localhost'},
                'port': {'default': '8082', 'enum': ['8082', '80']},
            },
        },
    ],
)


@app.get(
    '/attributes/computed',
    description=""" Without params, it returns a list of Attributes the user has access to """,
    tags=['attribute_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_attributes_computed(
    all: Optional[bool] = None,
    user_id: Optional[int] = Query(None, alias='userId'),
    device_id: Optional[int] = Query(None, alias='deviceId'),
    group_id: Optional[int] = Query(None, alias='groupId'),
    refresh: Optional[bool] = None,
):
    """
    Fetch a list of Attributes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/attributes/computed',
    tags=['attribute_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def post_attributes_computed(body: Attribute):
    """
    Create an Attribute
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/attributes/computed/{id}',
    tags=['attribute_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_attributes_computed__id(id: int):
    """
    Delete an Attribute
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/attributes/computed/{id}',
    tags=['attribute_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def put_attributes_computed__id(id: int, body: Attribute = ...):
    """
    Update an Attribute
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/calendars',
    description=""" Without params, it returns a list of Calendars the user has access to """,
    tags=['calendar_entry_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_calendars(
    all: Optional[bool] = None, user_id: Optional[int] = Query(None, alias='userId')
):
    """
    Fetch a list of Calendars
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/calendars',
    tags=['calendar_entry_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def post_calendars(body: Calendar):
    """
    Create a Calendar
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/calendars/{id}',
    tags=['calendar_entry_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_calendars__id(id: int):
    """
    Delete a Calendar
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/calendars/{id}',
    tags=['calendar_entry_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def put_calendars__id(id: int, body: Calendar = ...):
    """
    Update a Calendar
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/commands',
    description=""" Without params, it returns a list of Saved Commands the user has access to """,
    tags=['command_storage_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_commands(
    all: Optional[bool] = None,
    user_id: Optional[int] = Query(None, alias='userId'),
    device_id: Optional[int] = Query(None, alias='deviceId'),
    group_id: Optional[int] = Query(None, alias='groupId'),
    refresh: Optional[bool] = None,
):
    """
    Fetch a list of Saved Commands
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/commands',
    tags=['command_storage_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def post_commands(body: Command):
    """
    Create a Saved Command
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/commands/send',
    description=""" Return a list of saved commands linked to Device and its groups, filtered by current Device protocol support """,
    tags=['command_storage_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_commands_send(device_id: Optional[int] = Query(None, alias='deviceId')):
    """
    Fetch a list of Saved Commands supported by Device at the moment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/commands/send',
    description=""" Dispatch a new command or Saved Command if _body.id_ set """,
    tags=['command_storage_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def post_commands_send(body: Command):
    """
    Dispatch commands to device
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/commands/types',
    tags=['command_storage_management', 'device_registry_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_commands_types(
    device_id: Optional[int] = Query(None, alias='deviceId'),
    protocol: Optional[str] = None,
    text_channel: Optional[bool] = Query(None, alias='textChannel'),
):
    """
    Fetch a list of available Commands for the Device or all possible Commands if Device ommited
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/commands/{id}',
    tags=['command_storage_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_commands__id(id: int):
    """
    Delete a Saved Command
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/commands/{id}',
    tags=['command_storage_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def put_commands__id(id: int, body: Command = ...):
    """
    Update a Saved Command
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/devices',
    description=""" Without any params, returns a list of the user's devices """,
    tags=['device_registry_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_devices(
    all: Optional[bool] = None,
    user_id: Optional[int] = Query(None, alias='userId'),
    id: Optional[int] = None,
    unique_id: Optional[str] = Query(None, alias='uniqueId'),
):
    """
    Fetch a list of Devices
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/devices',
    tags=['device_registry_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def post_devices(body: Device):
    """
    Create a Device
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/devices/{id}',
    tags=['device_registry_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_devices__id(id: int):
    """
    Delete a Device
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/devices/{id}',
    tags=['device_registry_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def put_devices__id(id: int, body: Device = ...):
    """
    Update a Device
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/devices/{id}/accumulators',
    tags=['device_registry_management', 'attribute_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def put_devices__id_accumulators(id: int, body: DeviceAccumulators = ...):
    """
    Update total distance and hours of the Device
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/drivers',
    description=""" Without params, it returns a list of Drivers the user has access to """,
    tags=['driver_entry_management', 'device_registry_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_drivers(
    all: Optional[bool] = None,
    user_id: Optional[int] = Query(None, alias='userId'),
    device_id: Optional[int] = Query(None, alias='deviceId'),
    group_id: Optional[int] = Query(None, alias='groupId'),
    refresh: Optional[bool] = None,
):
    """
    Fetch a list of Drivers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/drivers',
    tags=['driver_entry_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def post_drivers(body: Driver):
    """
    Create a Driver
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/drivers/{id}',
    tags=['driver_entry_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_drivers__id(id: int):
    """
    Delete a Driver
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/drivers/{id}',
    tags=['driver_entry_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def put_drivers__id(id: int, body: Driver = ...):
    """
    Update a Driver
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/events/{id}',
    tags=['user_data_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_events__id(id: int):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/geofences',
    description=""" Without params, it returns a list of Geofences the user has access to """,
    tags=['geofence_definition_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_geofences(
    all: Optional[bool] = None,
    user_id: Optional[int] = Query(None, alias='userId'),
    device_id: Optional[int] = Query(None, alias='deviceId'),
    group_id: Optional[int] = Query(None, alias='groupId'),
    refresh: Optional[bool] = None,
):
    """
    Fetch a list of Geofences
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/geofences',
    tags=['geofence_definition_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def post_geofences(body: Geofence):
    """
    Create a Geofence
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/geofences/{id}',
    tags=['geofence_definition_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_geofences__id(id: int):
    """
    Delete a Geofence
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/geofences/{id}',
    tags=['geofence_definition_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def put_geofences__id(id: int, body: Geofence = ...):
    """
    Update a Geofence
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/groups',
    description=""" Without any params, returns a list of the Groups the user belongs to """,
    tags=['group_configuration_management', 'user_data_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_groups(
    all: Optional[bool] = None, user_id: Optional[int] = Query(None, alias='userId')
):
    """
    Fetch a list of Groups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/groups',
    tags=['group_configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def post_groups(body: Group):
    """
    Create a Group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/groups/{id}',
    tags=['group_configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_groups__id(id: int):
    """
    Delete a Group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/groups/{id}',
    tags=['group_configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def put_groups__id(id: int, body: Group = ...):
    """
    Update a Group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/maintenance',
    description=""" Without params, it returns a list of Maintenance the user has access to """,
    tags=['maintenance_record_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_maintenance(
    all: Optional[bool] = None,
    user_id: Optional[int] = Query(None, alias='userId'),
    device_id: Optional[int] = Query(None, alias='deviceId'),
    group_id: Optional[int] = Query(None, alias='groupId'),
    refresh: Optional[bool] = None,
):
    """
    Fetch a list of Maintenance
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/maintenance',
    tags=['maintenance_record_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def post_maintenance(body: Maintenance):
    """
    Create a Maintenance
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/maintenance/{id}',
    tags=['maintenance_record_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_maintenance__id(id: int):
    """
    Delete a Maintenance
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/maintenance/{id}',
    tags=['maintenance_record_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def put_maintenance__id(id: int, body: Maintenance = ...):
    """
    Update a Maintenance
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/notifications',
    description=""" Without params, it returns a list of Notifications the user has access to """,
    tags=['notification_system_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_notifications(
    all: Optional[bool] = None,
    user_id: Optional[int] = Query(None, alias='userId'),
    device_id: Optional[int] = Query(None, alias='deviceId'),
    group_id: Optional[int] = Query(None, alias='groupId'),
    refresh: Optional[bool] = None,
):
    """
    Fetch a list of Notifications
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/notifications',
    tags=['notification_system_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def post_notifications(body: Notification):
    """
    Create a Notification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/notifications/test',
    tags=['notification_system_management', 'user_data_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def post_notifications_test():
    """
    Send test notification to current user via Email and SMS
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/notifications/types',
    tags=['notification_system_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_notifications_types():
    """
    Fetch a list of available Notification types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/notifications/{id}',
    tags=['notification_system_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_notifications__id(id: int):
    """
    Delete a Notification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/notifications/{id}',
    tags=['notification_system_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def put_notifications__id(id: int, body: Notification = ...):
    """
    Update a Notification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/permissions',
    tags=['permission_linkage_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_permissions(body: Permission):
    """
    Unlink an Object from another Object
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/permissions',
    tags=['permission_linkage_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def post_permissions(body: Permission):
    """
    Link an Object to another Object
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/positions',
    description=""" We strongly recommend using [Traccar WebSocket API](https://www.traccar.org/traccar-api/) instead of periodically polling positions endpoint. Without any params, it returns a list of last known positions for all the user's Devices. _from_ and _to_ fields are not required with _id_. """,
    tags=['report_generation_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_positions(
    device_id: Optional[int] = Query(None, alias='deviceId'),
    from_: Optional[datetime] = Query(None, alias='from'),
    to: Optional[datetime] = None,
    id: Optional[int] = None,
):
    """
    Fetches a list of Positions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reports/events',
    description=""" At least one _deviceId_ or one _groupId_ must be passed """,
    tags=['calendar_entry_management', 'report_generation_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_reports_events(
    device_id: Optional[DeviceId] = Query(None, alias='deviceId'),
    group_id: Optional[GroupId] = Query(None, alias='groupId'),
    type: Optional[Type] = None,
    from_: datetime = Query(..., alias='from'),
    to: datetime = ...,
):
    """
    Fetch a list of Events within the time period for the Devices or Groups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reports/route',
    description=""" At least one _deviceId_ or one _groupId_ must be passed """,
    tags=['report_generation_management', 'device_registry_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_reports_route(
    device_id: Optional[DeviceId] = Query(None, alias='deviceId'),
    group_id: Optional[GroupId] = Query(None, alias='groupId'),
    from_: datetime = Query(..., alias='from'),
    to: datetime = ...,
):
    """
    Fetch a list of Positions within the time period for the Devices or Groups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reports/stops',
    description=""" At least one _deviceId_ or one _groupId_ must be passed """,
    tags=[
        'report_generation_management',
        'device_registry_management',
        'group_configuration_management',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_reports_stops(
    device_id: Optional[DeviceId] = Query(None, alias='deviceId'),
    group_id: Optional[GroupId] = Query(None, alias='groupId'),
    from_: datetime = Query(..., alias='from'),
    to: datetime = ...,
):
    """
    Fetch a list of ReportStops within the time period for the Devices or Groups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reports/summary',
    description=""" At least one _deviceId_ or one _groupId_ must be passed """,
    tags=['report_generation_management', 'device_registry_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_reports_summary(
    device_id: Optional[DeviceId] = Query(None, alias='deviceId'),
    group_id: Optional[GroupId] = Query(None, alias='groupId'),
    from_: datetime = Query(..., alias='from'),
    to: datetime = ...,
):
    """
    Fetch a list of ReportSummary within the time period for the Devices or Groups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/reports/trips',
    description=""" At least one _deviceId_ or one _groupId_ must be passed """,
    tags=['report_generation_management', 'device_registry_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_reports_trips(
    device_id: Optional[DeviceId] = Query(None, alias='deviceId'),
    group_id: Optional[GroupId] = Query(None, alias='groupId'),
    from_: datetime = Query(..., alias='from'),
    to: datetime = ...,
):
    """
    Fetch a list of ReportTrips within the time period for the Devices or Groups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/server',
    tags=['server_info_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_server():
    """
    Fetch Server information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/server',
    tags=['server_info_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def put_server(body: Server):
    """
    Update Server information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/session',
    tags=['session_tracking_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_session():
    """
    Close the Session
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/session',
    tags=['session_tracking_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_session(token: Optional[str] = None):
    """
    Fetch Session information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/session',
    tags=['session_tracking_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def post_session(request: Request):
    """
    Create a new Session
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/statistics',
    tags=['server_info_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_statistics(from_: datetime = Query(..., alias='from'), to: datetime = ...):
    """
    Fetch server Statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users',
    tags=['user_data_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_users(user_id: Optional[str] = Query(None, alias='userId')):
    """
    Fetch a list of Users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users',
    tags=['user_data_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def post_users(body: User):
    """
    Create a User
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/users/{id}',
    tags=['user_data_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_users__id(id: int):
    """
    Delete a User
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/users/{id}',
    tags=['user_data_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def put_users__id(id: int, body: User = ...):
    """
    Update a User
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
