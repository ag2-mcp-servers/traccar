# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T10:35:23+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr


class Attribute(BaseModel):
    attribute: Optional[str] = None
    description: Optional[str] = None
    expression: Optional[str] = None
    id: Optional[int] = None
    type: Optional[str] = Field(None, description='String|Number|Boolean')


class Calendar(BaseModel):
    attributes: Optional[Dict[str, Any]] = None
    data: Optional[str] = Field(None, description='base64 encoded in iCalendar format')
    id: Optional[int] = None
    name: Optional[str] = None


class Command(BaseModel):
    attributes: Optional[Dict[str, Any]] = None
    description: Optional[str] = None
    deviceId: Optional[int] = None
    id: Optional[int] = None
    type: Optional[str] = None


class CommandType(BaseModel):
    type: Optional[str] = None


class Device(BaseModel):
    attributes: Optional[Dict[str, Any]] = None
    category: Optional[str] = None
    contact: Optional[str] = None
    disabled: Optional[bool] = None
    geofenceIds: Optional[List[int]] = None
    groupId: Optional[int] = None
    id: Optional[int] = None
    lastUpdate: Optional[datetime] = Field(
        None, description='in IS0 8601 format. eg. `1963-11-22T18:30:00Z`'
    )
    model: Optional[str] = None
    name: Optional[str] = None
    phone: Optional[str] = None
    positionId: Optional[int] = None
    status: Optional[str] = None
    uniqueId: Optional[str] = None


class DeviceAccumulators(BaseModel):
    deviceId: Optional[int] = None
    hours: Optional[float] = None
    totalDistance: Optional[float] = Field(None, description='in meters')


class Driver(BaseModel):
    attributes: Optional[Dict[str, Any]] = None
    id: Optional[int] = None
    name: Optional[str] = None
    uniqueId: Optional[str] = None


class Event(BaseModel):
    attributes: Optional[Dict[str, Any]] = None
    deviceId: Optional[int] = None
    eventTime: Optional[datetime] = Field(
        None, description='in IS0 8601 format. eg. `1963-11-22T18:30:00Z`'
    )
    geofenceId: Optional[int] = None
    id: Optional[int] = None
    maintenanceId: Optional[int] = None
    positionId: Optional[int] = None
    type: Optional[str] = None


class Geofence(BaseModel):
    area: Optional[str] = None
    attributes: Optional[Dict[str, Any]] = None
    calendarId: Optional[int] = None
    description: Optional[str] = None
    id: Optional[int] = None
    name: Optional[str] = None


class Group(BaseModel):
    attributes: Optional[Dict[str, Any]] = None
    groupId: Optional[int] = None
    id: Optional[int] = None
    name: Optional[str] = None


class Maintenance(BaseModel):
    attributes: Optional[Dict[str, Any]] = None
    id: Optional[int] = None
    name: Optional[str] = None
    period: Optional[float] = None
    start: Optional[float] = None
    type: Optional[str] = None


class Notification(BaseModel):
    always: Optional[bool] = None
    attributes: Optional[Dict[str, Any]] = None
    calendarId: Optional[int] = None
    id: Optional[int] = None
    mail: Optional[bool] = None
    sms: Optional[bool] = None
    type: Optional[str] = None
    web: Optional[bool] = None


class NotificationType(BaseModel):
    type: Optional[str] = None


class Permission(BaseModel):
    attributeId: Optional[int] = Field(
        None, description='Computed Attribute Id, can be second parameter only'
    )
    calendarId: Optional[int] = Field(
        None,
        description='Calendar Id, can be second parameter only and only in combination with userId',
    )
    deviceId: Optional[int] = Field(
        None,
        description='Device Id, can be first parameter or second only in combination with userId',
    )
    driverId: Optional[int] = Field(
        None, description='Driver Id, can be second parameter only'
    )
    geofenceId: Optional[int] = Field(
        None, description='Geofence Id, can be second parameter only'
    )
    groupId: Optional[int] = Field(
        None,
        description='Group Id, can be first parameter or second only in combination with userId',
    )
    managedUserId: Optional[int] = Field(
        None,
        description='User Id, can be second parameter only and only in combination with userId',
    )
    notificationId: Optional[int] = Field(
        None, description='Notification Id, can be second parameter only'
    )
    userId: Optional[int] = Field(
        None, description='User Id, can be only first parameter'
    )


class Position(BaseModel):
    accuracy: Optional[float] = None
    address: Optional[str] = None
    altitude: Optional[float] = None
    attributes: Optional[Dict[str, Any]] = None
    course: Optional[float] = None
    deviceId: Optional[int] = None
    deviceTime: Optional[datetime] = Field(
        None, description='in IS0 8601 format. eg. `1963-11-22T18:30:00Z`'
    )
    fixTime: Optional[datetime] = Field(
        None, description='in IS0 8601 format. eg. `1963-11-22T18:30:00Z`'
    )
    id: Optional[int] = None
    latitude: Optional[float] = None
    longitude: Optional[float] = None
    network: Optional[Dict[str, Any]] = None
    outdated: Optional[bool] = None
    protocol: Optional[str] = None
    serverTime: Optional[datetime] = Field(
        None, description='in IS0 8601 format. eg. `1963-11-22T18:30:00Z`'
    )
    speed: Optional[float] = Field(None, description='in knots')
    valid: Optional[bool] = None


class ReportStops(BaseModel):
    address: Optional[str] = None
    deviceId: Optional[int] = None
    deviceName: Optional[str] = None
    duration: Optional[int] = None
    endTime: Optional[datetime] = Field(
        None, description='in IS0 8601 format. eg. `1963-11-22T18:30:00Z`'
    )
    engineHours: Optional[int] = None
    lat: Optional[float] = None
    lon: Optional[float] = None
    spentFuel: Optional[float] = Field(None, description='in liters')
    startTime: Optional[datetime] = Field(
        None, description='in IS0 8601 format. eg. `1963-11-22T18:30:00Z`'
    )


class ReportSummary(BaseModel):
    averageSpeed: Optional[float] = Field(None, description='in knots')
    deviceId: Optional[int] = None
    deviceName: Optional[str] = None
    distance: Optional[float] = Field(None, description='in meters')
    engineHours: Optional[int] = None
    maxSpeed: Optional[float] = Field(None, description='in knots')
    spentFuel: Optional[float] = Field(None, description='in liters')


class ReportTrips(BaseModel):
    averageSpeed: Optional[float] = Field(None, description='in knots')
    deviceId: Optional[int] = None
    deviceName: Optional[str] = None
    distance: Optional[float] = Field(None, description='in meters')
    driverName: Optional[str] = None
    driverUniqueId: Optional[int] = None
    duration: Optional[int] = None
    endAddress: Optional[str] = None
    endLat: Optional[float] = None
    endLon: Optional[float] = None
    endTime: Optional[datetime] = Field(
        None, description='in IS0 8601 format. eg. `1963-11-22T18:30:00Z`'
    )
    maxSpeed: Optional[float] = Field(None, description='in knots')
    spentFuel: Optional[float] = Field(None, description='in liters')
    startAddress: Optional[str] = None
    startLat: Optional[float] = None
    startLon: Optional[float] = None
    startTime: Optional[datetime] = Field(
        None, description='in IS0 8601 format. eg. `1963-11-22T18:30:00Z`'
    )


class Server(BaseModel):
    attributes: Optional[Dict[str, Any]] = None
    bingKey: Optional[str] = None
    coordinateFormat: Optional[str] = None
    deviceReadonly: Optional[bool] = None
    forceSettings: Optional[bool] = None
    id: Optional[int] = None
    latitude: Optional[float] = None
    limitCommands: Optional[bool] = None
    longitude: Optional[float] = None
    map: Optional[str] = None
    mapUrl: Optional[str] = None
    poiLayer: Optional[str] = None
    readonly: Optional[bool] = None
    registration: Optional[bool] = None
    twelveHourFormat: Optional[bool] = None
    version: Optional[str] = None
    zoom: Optional[int] = None


class Statistics(BaseModel):
    activeDevices: Optional[int] = None
    activeUsers: Optional[int] = None
    captureTime: Optional[datetime] = Field(
        None, description='in IS0 8601 format. eg. `1963-11-22T18:30:00Z`'
    )
    messagesReceived: Optional[int] = None
    messagesStored: Optional[int] = None
    requests: Optional[int] = None


class User(BaseModel):
    administrator: Optional[bool] = None
    attributes: Optional[Dict[str, Any]] = None
    coordinateFormat: Optional[str] = None
    deviceLimit: Optional[int] = None
    deviceReadonly: Optional[bool] = None
    disabled: Optional[bool] = None
    email: Optional[str] = None
    expirationTime: Optional[datetime] = Field(
        None, description='in IS0 8601 format. eg. `1963-11-22T18:30:00Z`'
    )
    id: Optional[int] = None
    latitude: Optional[float] = None
    limitCommands: Optional[bool] = None
    longitude: Optional[float] = None
    map: Optional[str] = None
    name: Optional[str] = None
    password: Optional[str] = None
    phone: Optional[str] = None
    poiLayer: Optional[str] = None
    readonly: Optional[bool] = None
    twelveHourFormat: Optional[bool] = None
    userLimit: Optional[int] = None
    zoom: Optional[int] = None


class AttributesComputedGetResponse(RootModel[List[Attribute]]):
    root: List[Attribute]


class CalendarsGetResponse(RootModel[List[Calendar]]):
    root: List[Calendar]


class CommandsGetResponse(RootModel[List[Command]]):
    root: List[Command]


class CommandsSendGetResponse(RootModel[List[Command]]):
    root: List[Command]


class CommandsTypesGetResponse(RootModel[List[CommandType]]):
    root: List[CommandType]


class DevicesGetResponse(RootModel[List[Device]]):
    root: List[Device]


class DriversGetResponse(RootModel[List[Driver]]):
    root: List[Driver]


class GeofencesGetResponse(RootModel[List[Geofence]]):
    root: List[Geofence]


class GroupsGetResponse(RootModel[List[Group]]):
    root: List[Group]


class MaintenanceGetResponse(RootModel[List[Maintenance]]):
    root: List[Maintenance]


class NotificationsGetResponse(RootModel[List[Notification]]):
    root: List[Notification]


class NotificationsTypesGetResponse(RootModel[List[NotificationType]]):
    root: List[NotificationType]


class PositionsGetResponse(RootModel[List[Position]]):
    root: List[Position]


class ReportsEventsGetResponse(RootModel[List[Event]]):
    root: List[Event]


class DeviceId(RootModel[List[int]]):
    root: List[int]


class GroupId(RootModel[List[int]]):
    root: List[int]


class Type(RootModel[List[str]]):
    root: List[str]


class ReportsRouteGetResponse(RootModel[List[Position]]):
    root: List[Position]


class ReportsStopsGetResponse(RootModel[List[ReportStops]]):
    root: List[ReportStops]


class ReportsSummaryGetResponse(RootModel[List[ReportSummary]]):
    root: List[ReportSummary]


class ReportsTripsGetResponse(RootModel[List[ReportTrips]]):
    root: List[ReportTrips]


class SessionPostRequest(BaseModel):
    email: str
    password: SecretStr


class StatisticsGetResponse(RootModel[List[Statistics]]):
    root: List[Statistics]


class UsersGetResponse(RootModel[List[User]]):
    root: List[User]
